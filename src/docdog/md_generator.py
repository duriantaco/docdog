from openai import OpenAI
import os
from dotenv import load_dotenv
import datetime

load_dotenv()

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("ERROR: OPENAI_API_KEY not found in .env file.")
client = OpenAI(api_key=api_key)

def generate_markdown(summaries, output_file="README.md", config=None):
    """Generates a markdown file from code summaries"""
    if config is None:
        config = {
            "model": "gpt-3.5-turbo",
            "max_tokens": 500,
            "temperature": 0.7
        }
    
    verbose = config.get('verbose', False)
    
    prompt = "Create a Markdown file with the following summaries of code functions and classes:\n\n"
    for summary in summaries:
        prompt += f"- **{summary['type'].capitalize()} {summary['name']}**: {summary['summary']}\n"
    prompt += "\nOrganize them into sections with headers for each function or class."

    try:
        if verbose:
            print("üîÑ Generating documentation structure...")
        
        response = client.chat.completions.create(
            model=config.get('model', "gpt-3.5-turbo"),
            messages=[
                {"role": "system", "content": "You are a helpful assistant that creates markdown documentation."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=config.get('max_tokens', 500),
            temperature=config.get('temperature', 0.7)
        )
        md_content = response.choices[0].message.content.strip()
        
        if verbose:
            print("‚úÖ Documentation structure generated")
    except Exception as e:
        if verbose:
            print(f"‚ùå Failed to generate Markdown: {e}")
        md_content = "# Summary Generation Failed\n\nUnable to generate Markdown content due to an error."

    current_date = datetime.datetime.now().strftime("%Y-%m-%d")
    
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(f"# Code Documentation\n\n")
        f.write(f"*Generated by DocDog on {current_date}*\n\n")
        f.write("## Table of Contents\n\n")
        
        types = set(summary['type'] for summary in summaries)
        for type_name in sorted(types):
            f.write(f"- [{type_name.capitalize()}s](#user-content-{type_name}s)\n")
        
        f.write("\n---\n\n")
        f.write(md_content)
        f.write("\n\n---\n\n*This documentation was automatically generated using DocDog, an AI-powered code summarizer.*")
    
    if verbose:
        print(f"üìù Documentation written to {output_file}")